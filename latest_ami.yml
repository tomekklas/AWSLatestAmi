---
AWSTemplateFormatVersion: '2010-09-09'

Description: Update SecretStore with latest ami for given setup. Runs weekly.

Parameters:
  
  SecretName:
    Type: String

  AmiName:
    Type: String
    Default: "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"

Resources:

  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: "*"

  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback
          
          client = boto3.client('ec2')

          def handler(event, context):

            try:
              response = client.describe_images(
                Filters=[
                  {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                  {'Name': 'is-public', 'Values': ['true']},
                  {'Name': 'architecture', 'Values': ['x86_64']},
                  {'Name': 'state', 'Values': ['available']},
                  {'Name': 'root-device-type', 'Values': ['ebs']}
                  ],
                Owners=['099720109477']
              )
          
          
              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
          
              id = amis[0]['ImageId']
            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")


  LatestUbuntuAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !GetAtt GetLatestAMI.Arn
      Name: !Ref AmiName
  
  # store ami id in secret manager for easy rea-time retreival
  StoreAmiId:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Latest ami id for ubuntu
      Name: !Ref SecretName
      SecretString: !Sub "{\"LatestAmiId\":\"${LatestUbuntuAmi}\"}"

  LambdaScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: LambdaScheduledRule
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "GetLatestAMI"
              - "Arn"
          Id: "GetLatestAMI"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "GetLatestAMI"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "LambdaScheduledRule"
          - "Arn"

Outputs:
  
  GetLatestAMIArn:
    Description: This value will be keep up top date in Secret Manager.
    Value: !GetAtt GetLatestAMI.Arn
